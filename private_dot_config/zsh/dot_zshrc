# Amazon Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
# Q pre block. Keep at the top of this file.

# ----------------------------------------------------------------------
# XDG_CONFIG
# ----------------------------------------------------------------------
# Most of these came from xdg-ninja
autoload -Uz compinit && compinit -d "$XDG_CACHE_HOME"/zsh/zcompdump-"$ZSH_VERSION"
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME"/zsh/zcompcache
export HISTFILE="$XDG_STATE_HOME"/zsh/history
export SQLITE_HISTORY="$XDG_CACHE_HOME"/sqlite_history
export SONARLINT_USER_HOME="$XDG_DATA_HOME"/sonarlint
export RUSTUP_HOME="$XDG_DATA_HOME"/rustup
export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME"/bundle
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME"/bundle
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME"/bundle
export REDISCLI_HISTFILE="$XDG_STATE_HOME"/redis/rediscli_history
export RBENV_ROOT="$XDG_DATA_HOME"/rbenv
export PYTHON_HISTORY="$XDG_STATE_HOME"/python/python_history
export PYENV_ROOT="$XDG_DATA_HOME"/pyenv
export PSQLRC="$XDG_CONFIG_HOME"/pg/psqlrc
export _JAVA_OPTIONS="-Djava.util.prefs.userRoot=${XDG_CONFIG_HOME}/java -Djavafx.cachedir=${XDG_CACHE_HOME}/openjfx"
export RANDFILE="$XDG_CONFIG_HOME"/openssl/rnd
export NUGET_PACKAGES="$XDG_CACHE_HOME"/NuGetPackages
export NPM_CONFIG_INIT_MODULE="$XDG_CONFIG_HOME"/npm/config/npm-init.js
export NPM_CONFIG_CACHE="$XDG_CACHE_HOME"/npm
export NPM_CONFIG_TMP="$XDG_RUNTIME_DIR"/npm
export NODENV_ROOT="$XDG_DATA_HOME"/nodenv
export NODE_REPL_HISTORY="$XDG_STATE_HOME"/node_repl_history
export MINIKUBE_HOME="$XDG_DATA_HOME"/minikube
export FLY_CONFIG_DIR="$XDG_STATE_HOME"/fly
export DOTNET_CLI_HOME="$XDG_DATA_HOME"/dotnet
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
export ACKRC="$XDG_CONFIG_HOME"/ack/ackrc
export ASDF_DATA_DIR="$XDG_DATA_HOME"/asdf
export ASDF_CONFIG_FILE="$XDG_CONFIG_HOME"/asdf/asdfrc
export CARGO_HOME="$XDG_DATA_HOME"/cargo
export AZURE_CONFIG_DIR="$XDG_DATA_HOME"/azure
export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME"/aws/credentials
export AWS_CONFIG_FILE="$XDG_CONFIG_HOME"/aws/config

# ----------------------------------------------------------------------
# HOMEBREW
# ----------------------------------------------------------------------

if type brew &>/dev/null; then
  # shell completions
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
  autoload -Uz compinit && compinit

  # add GNU replacements to the path
  # test -d "$(brew --prefix coreutils)/libexec/gnubin" &&
  #  export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
fi

# ----------------------------------------------------------------------
# BASICS
# ----------------------------------------------------------------------

export EDITOR='lvim'
export GPG_TTY=$(tty)
export PROMPT='%n@%m %3~%(!.#.$)%(?.. [%?]) '

# ----------------------------------------------------------------------
# ALIASES
# ----------------------------------------------------------------------

function ghpr()
{
  GH_FORCE_TTY=100% gh pr list | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | awk '{print $1}' | xargs gh pr checkout
}
alias coauth='printf "Co-authored-by: %s" "$(git log --pretty=format:"%an <%ae>" -10000 | sort | uniq -c | sort -rnk1 | fzf | sed "s/^[[:space:]]*[[:digit:]]*[[:space:]]*//g")" | pbcopy'

# ls
alias ls="eza"
alias ll="ls -l --icons"
alias lh="ls -d .*"
alias la="ls -la"
# vim
alias vi="lvim"
alias vim="lvim"
# zsh
alias zshconfig="lvim ~/.config/zsh/.zshrc"
alias zshreload="source ~/.config/zsh/.zshrc"
# git
alias g="git"
# make rm less destructive
alias rm="rm -i"
# du
alias dus="du -sckx * | sort -nr"
# comand alerts
alias alert="say 'Command finished'"
alias notify="say 'Command succeeded' || say 'Command failed'"

# ----------------------------------------------------------------------
# ITERM INTEGRATION`
# ----------------------------------------------------------------------

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# ----------------------------------------------------------------------
# FZF
# ----------------------------------------------------------------------

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# ----------------------------------------------------------------------
# PATH
# ----------------------------------------------------------------------

# we want the various sbins on the path along with /usr/local/bin
export PATH="$PATH:/usr/local/sbin:/usr/sbin:/sbin"
export PATH="/usr/local/bin:$PATH"

# put ~/bin on PATH if you have it
test -d "$HOME/bin" &&
  export PATH="$HOME/bin:$PATH"

# put ~/.local/bin on PATH if you have it
test -d "$HOME/.local/bin" &&
  export PATH="$HOME/.local/bin:$PATH"

# add yarn-managed binaries to the PATH
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# add homebrew's sqlite to the the path, ahead of the system version
brew list sqlite &>/dev/null && export PATH="$(brew --prefix sqlite)/bin:$PATH"

# ----------------------------------------------------------------------
# Manually fixing up CPATH for dependencies
# ----------------------------------------------------------------------

export LDFLAGS="-L$(brew --prefix)/lib"
export CPPFLAGS="-I$(brew --prefix)/include"

# ----------------------------------------------------------------------
# Docker
# ----------------------------------------------------------------------
#export DOCKER_HOST=unix://$HOME/.colima/default/docker.sock

# ----------------------------------------------------------------------
# Version managers
# ----------------------------------------------------------------------

# initialize rbenv shims
if which rbenv > /dev/null; then eval "$(rbenv init - zsh)"; fi

# initialize nodenv shims
if which nodenv > /dev/null; then eval "$(nodenv init -)"; fi

# initialize pyenv shims
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# add Rails binstubs to the PATH
#export PATH="./bin:$PATH"

# initialize asdf after PATH is set
. "$(brew --prefix asdf)/libexec/asdf.sh"

# ----------------------------------------------------------------------
# Direnv
# ----------------------------------------------------------------------
eval "$(direnv hook zsh)"

# ----------------------------------------------------------------------
# Devenv
# ----------------------------------------------------------------------
source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
source /nix/var/nix/profiles/default/etc/profile.d/nix.sh

# ----------------------------------------------------------------------
# Atuin
# ----------------------------------------------------------------------
eval "$(atuin init zsh)"

# ----------------------------------------------------------------------
# Zoxide
# ----------------------------------------------------------------------
eval "$(zoxide init zsh)"

# ----------------------------------------------------------------------
# Starship
# ----------------------------------------------------------------------
eval "$(starship init zsh)"

# ----------------------------------------------------------------------
# Windsurf
# ----------------------------------------------------------------------
export PATH="/Users/kyleadams/.codeium/windsurf/bin:$PATH"

# Amazon Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"
